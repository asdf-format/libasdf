option(BZIP2_NO_PKGCONFIG NO)
# Ubuntu decided not to provide a bzip2 pkg-config file
# Uses the find_package function instead.
if(BZIP2_NO_PKGCONFIG)
    set(BZIP2_LIBRARIES "bz2")
    set(BZIP2_LIBDIR "" CACHE STRING "Directory containing libbz2 library")
    set(BZIP2_INCLUDEDIR "" CACHE STRING "Directory containing libbz2 headers")
    set(BZIP2_CFLAGS "" CACHE STRING "Compiler options for libbz2")
    set(BZIP2_LDFLAGS "" CACHE STRING "Linker options for libbz2")
    link_directories(${BZIP2_LIBDIR})
    include_directories(${BZIP2_INCLUDEDIR})
    add_link_options(${BZIP2_LDFLAGS})
    add_compile_options(${BZIP2_CFLAGS})
else()
    find_package(BZip2)
endif()

option(LZ4_NO_PKGCONFIG NO)
if(LZ4_NO_PKGCONFIG)
    set(LZ4_LIBRARIES "lz4")
    set(LZ4_LIBDIR "" CACHE STRING "Directory containing lz4 library")
    set(LZ4_INCLUDEDIR "" CACHE STRING "Directory containing lz4 headers")
    set(LZ4_CFLAGS "" CACHE STRING "Compiler options for lz4")
    set(LZ4_LDFLAGS "" CACHE STRING "Linker options for lz4")
    link_directories(${LZ4_LIBDIR})
    include_directories(${LZ4_INCLUDEDIR})
    add_link_options(${LZ4_LDFLAGS})
    add_compile_options(${LZ4_CFLAGS})
else()
    if(PKG_CONFIG_FOUND)
        pkg_check_modules(LZ4 liblz4 REQUIRED)
    else()
        message("pkg-config not found. Install pkg-config, or use LZ4_NO_PKGCONFIG=YES.")
    endif()
endif()

option(ZLIB_NO_PKGCONFIG NO)
if(ZLIB_NO_PKGCONFIG)
    set(ZLIB_LIBRARIES "z")
    set(ZLIB_LIBDIR "" CACHE STRING "Directory containing libz library")
    set(ZLIB_INCLUDEDIR "" CACHE STRING "Directory containing libz headers")
    set(ZLIB_CFLAGS "" CACHE STRING "Compiler options for libz")
    set(ZLIB_LDFLAGS "" CACHE STRING "Linker options for libz")
    link_directories(${ZLIB_LIBDIR})
    include_directories(${ZLIB_INCLUDEDIR})
    add_link_options(${ZLIB_LDFLAGS})
    add_compile_options(${ZLIB_CFLAGS})
else()
    if(PKG_CONFIG_FOUND)
        pkg_check_modules(ZLIB zlib REQUIRED)
    else()
        message("pkg-config not found. Install pkg-config, or use ZLIB_NO_PKGCONFIG=YES.")
    endif()
endif()

option(FYAML_NO_PKGCONFIG NO)
if(FYAML_NO_PKGCONFIG)
    set(FYAML_LIBRARIES "fyaml")
    set(FYAML_LIBDIR "" CACHE STRING "Directory containing libfyaml library")
    set(FYAML_INCLUDEDIR "" CACHE STRING "Directory containing libfyaml headers")
    set(FYAML_CFLAGS "" CACHE STRING "Compiler options for libfyaml")
    set(FYAML_LDFLAGS "" CACHE STRING "Linker options for libfyaml")
    link_directories(${FYAML_LIBDIR})
    include_directories(${FYAML_INCLUDEDIR})
    add_link_options(${FYAML_LDFLAGS})
    add_compile_options(${FYAML_CFLAGS})
else()
    if(PKG_CONFIG_FOUND)
        pkg_check_modules(FYAML libfyaml REQUIRED)
    else()
        message("pkg-config not found. Install pkg-config, or use FYAML_NO_PKGCONFIG=YES.")
    endif()
endif()

if(APPLE)
    option(ARGP_NO_PKGCONFIG NO)
    if(ARGP_NO_PKGCONFIG)
        set(ARGP_LIBRARIES "argp")
        set(ARGP_LIBDIR "" CACHE STRING "Directory containing libargp library")
        set(ARGP_INCLUDEDIR "" CACHE STRING "Directory containing libargp headers")
        set(ARGP_CFLAGS "" CACHE STRING "Compiler options for libargp")
        set(ARGP_LDFLAGS "" CACHE STRING "Linker options for libargp")
        link_directories(${ARGP_LIBDIR})
        include_directories(${ARGP_INCLUDEDIR})
        add_link_options(${ARGP_LDFLAGS})
        add_compile_options(${ARGP_CFLAGS})
    else()
        if(PKG_CONFIG_FOUND)
            pkg_check_modules(ARGP libargp REQUIRED)
        else()
            message("pkg-config not found. Install pkg-config, or use ARGP_NO_PKGCONFIG=YES.")
        endif()
    endif()
endif()

if(ENABLE_DOCS)
    find_package(Python3 REQUIRED)
    if (PYTHON3_FOUND)
        get_filename_component(python_prefix "${Python3_EXECUTABLE}" DIRECTORY)
        set(python_bindirs
            "${python_prefix}/bin"
            "${python_prefix}/Scripts" # windows
        )
    endif()

    find_program(SPHINX_BUILD_PROG
        NAMES sphinx-build sphinx-build.exe
        HINTS ${python_bindirs}
        REQUIRED
    )
    find_package_handle_standard_args(Sphinx DEFAULT_MSG SPHINX_BUILD_PROG)
endif()