#!/usr/bin/env python3
"""
Extract all C code blocks from ReST files and write them to test files.

Code blocks to test are always introduced by the ``.. code:: c`` block
directive.  Blocks to be extracted must include the ``:name:`` option with
a name beginning with ``test-``.
"""

import argparse
import os.path as pth
import re
import stat
from pathlib import Path

parser = argparse.ArgumentParser(description='Extract C code blocks from ReST')
parser.add_argument(
    'rst_files', nargs='+', type=Path,
    help='ReST files from which to extract code examples'
)
parser.add_argument(
    '--out-dir', type=Path, default=Path('doc_examples'),
    help='Directory to write extracted .c files'
)

# NOTE: Curently all the tests are designed to just work on a specific file,
# fixtures/cube.asdf; could change this later if need be.
parser.add_argument(
    '--fixtures-dir', type=Path, default=Path('fixtures'),
    help='Directory containing test files on which the programs are run')
args = parser.parse_args()

args.out_dir.mkdir(parents=True, exist_ok=True)

# Match a .. code:: c block, optionally with :name:
code_block_re = re.compile(
    r'^\s*\.\. code:: c\s*\n'
    r'((?:\s*:\w+:.*\n)*)'  # optional directives like :name:
    r'((?:\s{3,}.*\n)+)',   # indented code block
    re.MULTILINE
)

test_names = []

for rst_file in args.rst_files:
    if not rst_file.is_file():
        parser.exit(1, f'file not found: {rst_file}\n')

    content = rst_file.read_text()

    for match in code_block_re.finditer(content):
        directives, code_lines = match.groups()

        # Look for :name: directive starting with test_
        name_match = re.search(r':name:\s*(test-\S+)', directives)
        if not name_match:
            continue

        test_name = name_match.group(1)
        filename = f'{test_name}.c'

        # Remove leading indentation (3 or more spaces)
        code = '\n'.join(
            line[3:] if line.startswith('   ') else line
            for line in code_lines.splitlines()
        )

        lineno = content.count('\n', 0, match.start()) + 2
        out_file = args.out_dir / filename
        rst_file_rel = pth.relpath(rst_file.resolve(),
                                   start=args.out_dir.resolve())

        with out_file.open('w') as fobj:
            fobj.write(f'// Auto-generated test extracted from '
                       f'{rst_file_rel}:{lineno}\n')
            fobj.write(code)

        print(f'Wrote {out_file}')
        test_names.append(test_name)

# Generate a script to run the tests
shell_file = args.out_dir / 'test-doc-examples.sh'
fixture_file = args.fixtures_dir / 'cube.asdf'  # hard-coded for now

with open(shell_file, 'w') as fobj:
    fobj.write('#!/bin/sh\n')
    fobj.write(f'# Auto-generated by {parser.prog}; do not edit or commit\n\n')

    for test_name in test_names:
        fobj.write(f'echo "Running {test_name}"\n')
        fobj.write(f'{args.out_dir / test_name} {fixture_file} '
                   f'> {args.out_dir / test_name}.log\n')

print(f'Wrote {shell_file}')
shell_file.chmod(shell_file.stat().st_mode | stat.S_IXUSR)
