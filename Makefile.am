src_files = \
    src/block.c \
    src/context.c \
    src/core/asdf.c \
    src/core/extension_metadata.c \
    src/core/history_entry.c \
    src/core/ndarray.c \
    src/core/ndarray_convert.c \
    src/core/software.c \
    src/error.c \
    src/event.c \
    src/extension_registry.c \
    src/extension_util.c \
    src/file.c \
    src/info.c \
    src/log.c \
    src/parse.c \
    src/parse_util.c \
    src/stream.c \
    src/value.c \
    src/value_util.c \
    src/yaml.c

src_headers = \
    src/block.h \
    src/compat/endian.h \
    src/context.h \
    src/core/ndarray_convert.h \
    src/error.h \
    src/extension_registry.h \
    src/extension_util.h \
    src/event.h \
    src/file.h \
    src/info.h \
    src/log.h \
    src/parse.h \
    src/parse_util.h \
    src/stream.h \
    src/stream_intern.h \
    src/types/asdf_common_tag_map.h \
    src/types/asdf_extension_map.h \
    src/util.h \
    src/value.h \
    src/value_util.h \
    src/yaml.h

if HAVE_GWCS
    src_files += \
        src/gwcs/frame.c \
        src/gwcs/frame2d.c \
        src/gwcs/step.c \
        src/gwcs/wcs.c
endif

include_dir = $(top_srcdir)/include

AM_CFLAGS = $(ASDF_CFLAGS) -fvisibility=hidden
AM_CPPFLAGS = $(ASDF_CPPFLAGS) -I$(top_srcdir)/third_party/STC/include -I$(top_srcdir)/include
AM_LDFLAGS = $(ASDF_LDFLAGS)
ACLOCAL_AMFLAGS = -Im4

noinst_HEADERS = $(src_headers)


# libasdf library
#include .c and .h in SOURCES so that both appear in dist
lib_LTLIBRARIES = libasdf.la
libasdf_la_SOURCES = $(src_files)
libasdf_la_CFLAGS = $(AM_CFLAGS) $(FYAML_CFLAGS) $(CODE_COVERAGE_CFLAGS)
libasdf_la_LDFLAGS = $(CODE_COVERAGE_LDFLAGS)
libasdf_la_LIBADD = $(FYAML_LIBS) third_party/libstc.la

# The asdf command line tool
if ASDF_BUILD_TOOL
bin_PROGRAMS = asdf
asdf_SOURCES = src/main.c
asdf_CFLAGS = $(AM_CFLAGS) $(FYAML_CFLAGS) $(CODE_COVERAGE_CFLAGS)
asdf_LDFLAGS = $(CODE_COVERAGE_LDFLAGS)
asdf_LDADD = libasdf.la $(ARGP_LIB)
endif # ASDF_BUILD_TOOL


# Misc make targets
format:
	clang-format -i $(src_files) $(src_headers)


tidy:
	clang-tidy $(src_files) -- \
	    $(DEFS) $(DEFAULT_INCLUDES) $(AM_CPPLFAGS) $(CPPFLAGS) $(asdf_CFLAGS)

if BUILD_DOCS
docs:
	$(SPHINXBUILD) $(SPHINX_FLAGS) -b html $(srcdir)/docs $(srcdir)/docs/_build/html
endif
.PHONY: docs


# Check building docs from the distribution if possible
distcheck-hook:
if BUILD_DOCS
	$(MAKE) docs SPHINX_FLAGS=-W
endif


CODE_COVERAGE_IGNORE_PATTERN = \
    $(abs_top_srcdir)/tests/* \
    $(abs_top_srcdir)/tests/munit/*

# For rules generated by AX_AM_MACROS_STATIC; e.g. code coverage rules
include $(top_srcdir)/aminclude_static.am

SUBDIRS = include tests third_party docs

# Include sample files from asdf-standard in the distribution (used in tests)
# Eventually test against older reference files as well
reference_files = $(top_srcdir)/asdf-standard/reference_files/1.6.0
EXTRA_DIST = \
    CHANGES.rst \
    CODE_OF_CONDUCT.md \
    LICENSE \
    README.rst \
    $(reference_files)/anchor.asdf \
    $(reference_files)/ascii.asdf \
    $(reference_files)/basic.asdf \
    $(reference_files)/complex.asdf \
    $(reference_files)/compressed.asdf \
    $(reference_files)/endian.asdf \
    $(reference_files)/exploded0000.asdf \
    $(reference_files)/exploded.asdf \
    $(reference_files)/float.asdf \
    $(reference_files)/int.asdf \
    $(reference_files)/scalars.asdf \
    $(reference_files)/shared.asdf \
    $(reference_files)/stream.asdf \
    $(reference_files)/structured.asdf \
    $(reference_files)/unicode_bmp.asdf \
    $(reference_files)/unicode_spp.asdf
